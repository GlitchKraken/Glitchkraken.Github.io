---
---

@charset "UTF-8";

/* Fixing the box-sizing attribute will make sizing boxes easier. */
html {
   box-sizing: border-box;
   overflow-y: auto;
}



@font-face {
   font-family: gohu;
   src:url("gohufont-uni-14.ttf");
}

/* Normally the * selector is smart to avoid, but for this purpose it's fine. */
*, *:before, *:after {
   box-sizing: inherit;
}

body {
   background-color: #0C0D10;
   /*font-family: Georgia, serif;*/
   font-family: gohu;
   font-size: medium;
   color: 	#9370DB;
   overflow-x: hidden;
   overflow-y: hidden;
}

fieldset {
   border-color: rgb(68, 136, 204);
   border-radius: 10px;
   border-style: solid;
   border-width: 2px;
   float: left;
}



legend {
   border-color: rgb(68, 136, 204);
   border-style: solid;
   border-width: 2px;
   padding: 0px 5px;
}

/*Stylize and color the big fill-in title*/
h1 {
   color: #50327c;
   text-align: center;
   font-size: small;
   white-space: normal;
   /* opacity: 0%; */
}

.gt {
   text-align: left;
}


.Across1 {
   display: flex;
   justify-content: space-between;
   flex-direction: row;
   align-items: baseline;
   flex-wrap: wrap-reverse;
   padding: 15px;
}

.legend {
   color: #fd7f20;
}

.about_section {
   text-align: center;
}


/*Stylize, color and center the navigation bar.*/
.about_section > a {
   color: #fd7f20;
   text-align: center;
   text-decoration: none;
   background-color: transparent;
}


/*Specify Containers, and how flex should organize content within them.*/
/*First used in the about page.*/
/*Thanks to my friend Nickolas Gupton for having such good ideas on container management!*/

.container {
   display: flex;
   flex-direction: column;
   float: right;
   padding: 10%;
   width: 100%;
   margin-left: 0px;
   position: relative;
   padding-bottom: 1%;

   .row {
      width:  100%;
      display: flex;
      flex-direction: row;
      justify-content: space-between;
   }
   
   .col {
      display: flex;
      flex-direction: column;
      justify-content: space-between;
   }
}


.skills {
	margin-top: 0;
	margin-bottom: 0;
	padding-left: 10px;
	list-style-type: none;
	min-width: 150px;

	li:nth-child(odd){
		margin-top: 5px;
		width: 60%;
		float: left;
	}

	li:nth-child(even){
		width: 40%;
		float: right;
	}
}


/*Specify the boxes that go IN the container! their sizes will mostly be determined by the container class :)*/

/*thanks again to https://css-tricks.com/notched-boxes/    and Nickolas Gupton!   https://nickolas.gupton.xyz/   */
.displayBox {
   position: relative;
   width: 100%;
   padding: 23px;
   margin: 10px;
   margin-bottom: 23px;
   background-color: #2E1D48;
   border-color: indigo;
p {
   padding-left: 10px;
}

   --notchSize: 40px;
   clip-path: polygon(

      0% var(--notchSize),
      var(--notchSize) 0%,
      0px 0%,
      100% 0px,
      100% calc(100% - var(--notchSize)),
      calc(100% - var(--notchSize)) 100%,
      0px 100%,
      0% 0px
   
   );
}



.folder {
   color: #00FF33
}

#secret {
   color:#0C0D10;
}


h2 {
   text-align: center;
}

h4 {
   text-align: center;
}





button {
   color: #fd7f20;
   text-align: center;
   text-decoration: none;
   background-color: transparent;
   border-color: transparent;
   font-family: gohu;
   font-size: medium;
}

button:hover {
   transform: translateY(-10px);
}



/*What happens when a project blog is selected...*/
.project {
   color: #9370DB;
   text-decoration: none;
}

.project:hover {
   background-color: blue;
}

/*fix the bar at the bottom of the screen*/
hr {
   color: #9370DB;
   margin-top: 200px;
   border-radius: 80px;
   text-align: center;
}

.ProfSelfie {
   width: 50%;
   margin-left: auto;
   margin-right: auto;
   margin-bottom: 3%;
   border: 5px solid #ddd;
   border-radius: 5%;
   width: 10%;
   height: auto;
   padding: 5px;
}


.kitty {
   border: 5px solid #360ccc;
   border-radius: 20%;
   width: 20%;
   height: auto;
   padding: 5px;
}

.thanks {
   text-align: center;
}
/*Fix the bar to be at the bottom of the homepage screen.*/
.homepagehr {
    position: fixed;
    left: 0;
    top: 96%;
    width: 100%;
    margin: 0;
}


.credits {
    text-align: center;
    position: fixed;
    width:100%;
    height:100%;
    left:0px;
    top: 97.3%;
    bottom: 0px;
}





/*Below Here Be Dragons!*/



.overlay {
    opacity:0.8;
    position: relative;
    width:100%;
    height:100%;
    top:0px;
    left:0px;
    z-index:1000;
    overflow-x: hidden;
    overflow-y:  hidden;
}




/*********************************************************************************/
/*   Scanlines are ALL thanks to: https://codepen.io/meduzen/pen/zxbwRV          */
/*********************************************************************************/





/* REGULAR SCANLINES SETTINGS */

    // width of 1 scanline (min.: 1px)
    $scan-width: 5px;

    // emulates a damage-your-eyes bad pre-2000 CRT screen ♥ (true, false)
    $scan-crt: true;

    // frames-per-second (should be > 1), only applies if $scan-crt: true;
    $scan-fps: 60;

    // scanline-color (rgba)
    $scan-color: rgba(#000, .3);

    // set z-index on 8, like in ♥ 8-bits ♥, or…
    // set z-index on 2147483648 or more to enable scanlines on Chrome fullscreen (doesn't work in Firefox or IE);
    $scan-z-index: 2147483648; 

/* MOVING SCANLINE SETTINGS */

    // moving scanline (true, false)
    $scan-moving-line: true;

    // opacity of the moving scanline
    $scan-opacity: .75;

/* MIXINS */

    // apply CRT animation: @include scan-crt($scan-crt);
    @mixin scan-crt($scan-crt) {
        @if $scan-crt == true {
            animation: scanlines 1s steps($scan-fps) infinite;
        }
        @else { animation: none; }
    }

    // apply CRT animation: @include scan-crt($scan-crt);
    @mixin scan-moving($scan-moving-line) {
        @if $scan-moving-line == true {
            animation: scanline 6s linear infinite;
        }
        @else { animation: none; }
    }

/* CSS .scanlines CLASS */

    .scanlines {
        position: relative;
        overflow: hidden; // only to animate the unique scanline
        
        &:before,
        &:after {
            display: block;
            pointer-events: none;
            content: '';
            position: fixed;
        }

        // unique scanline travelling on the screen
        &:before {
            // position: absolute;
            // bottom: 100%;
            width: 100%;
            height: $scan-width * 1;
            z-index: $scan-z-index + 1;
            background: $scan-color;
            opacity: $scan-opacity;
            // animation: scanline 6s linear infinite;
            @include scan-moving($scan-moving-line);
        }

        // the scanlines, so!
        &:after {
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            z-index: $scan-z-index;
            background: linear-gradient(
                to bottom,
                transparent 50%,
                $scan-color 51%
            );
            background-size: 100% $scan-width*2;
            @include scan-crt($scan-crt);
        }  
    }

/* ANIMATE UNIQUE SCANLINE */
    @keyframes scanline {
        0% {
            transform: translate3d(0,200000%,0);
            // bottom: 0%; // to have a continuous scanline move, use this line (here in 0% step) instead of transform and write, in &:before, { position: absolute; bottom: 100%; }
        }
    }

    @keyframes scanlines {
        0% {
            background-position: 0 50%;
            // bottom: 0%; // to have a continuous scanline move, use this line (here in 0% step) instead of transform and write, in &:before, { position: absolute; bottom: 100%; }
        }
    }
